function compile(e){return compile.semantics.compile(e)}var compileObserver=require("./compile-observer"),Observers=require("./observers"),Binders=require("./binders"),solve=require("./algebra"),valueSyntax={type:"value"},trueSyntax={type:"literal",value:!0};module.exports=compile,compile.semantics={compilers:{property:Binders.makePropertyBinder,get:Binders.makeGetBinder,has:Binders.makeHasBinder,only:Binders.makeOnlyBinder,one:Binders.makeOneBinder,rangeContent:Binders.makeRangeContentBinder,mapContent:Binders.makeMapContentBinder,reversed:Binders.makeReversedBinder,and:Binders.makeAndBinder,or:Binders.makeOrBinder},compile:function(e){var i=this.compilers;if("default"===e.type)return this.compile(e.args[0]);if("literal"===e.type){if(null==e.value)return Function.noop;throw Error("Can't bind to literal: "+e.value)}if("equals"===e.type){var t=this.compile(e.args[0]),s=compileObserver(e.args[1]);return Binders.makeEqualityBinder(t,s)}if("if"===e.type){var a=compileObserver(e.args[0]),u=this.compile(e.args[1]),n=this.compile(e.args[2]);return Binders.makeConditionalBinder(a,u,n)}if("and"===e.type||"or"===e.type){var l=solve(e.args[0],valueSyntax),r=solve(e.args[1],valueSyntax),t=this.compile(l[0]),o=this.compile(r[0]),c=compileObserver(l[1]),m=compileObserver(r[1]),d=compileObserver(e.args[0]),s=compileObserver(e.args[1]);return this.compilers[e.type](t,o,d,s,c,m)}if("everyBlock"===e.type){var p=compileObserver(e.args[0]),v=solve(e.args[1],trueSyntax),g=this.compile(v[0]),h=compileObserver(v[1]);return Binders.makeEveryBlockBinder(p,g,h)}if("rangeContent"===e.type){var b,f=compileObserver(e.args[0]);try{b=this.compile(e.args[0])}catch(q){b=Function.noop}return Binders.makeRangeContentBinder(f,b)}if("defined"===e.type){var b=this.compile(e.args[0]);return Binders.makeDefinedBinder(b)}if("parent"===e.type){var b=this.compile(e.args[0]);return Binders.makeParentBinder(b)}if("with"===e.type){var f=compileObserver(e.args[0]),b=this.compile(e.args[1]);return Binders.makeWithBinder(f,b)}if(i.hasOwnProperty(e.type)){var S=e.args.map(compileObserver,compileObserver.semantics);return i[e.type].apply(null,S)}throw Error("Can't compile binder for "+JSON.stringify(e.type))}};